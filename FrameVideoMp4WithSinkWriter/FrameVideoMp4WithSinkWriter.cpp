#include <iostream>

#include <windows.h>

#include <mfapi.h>
#include <mfidl.h>
#include <mfreadwrite.h>

#pragma comment(lib, "mfplat.lib")
#pragma comment(lib, "mfreadwrite.lib")
#pragma comment(lib, "mfuuid.lib")

#include <unknwn.h>
#include <winrt/base.h>

#include <wil/resource.h>
#include <wil/com.h>

static uint64_t constexpr const g_FrameTimes[]
{
638306930970528,
638306930971194,
638306930971528,
638306930971861,
638306930972194,
638306930972528,
638306930973194,
638306930973528,
638306930973861,
638306930974194,
638306930974528,
638306930975194,
638306930975528,
638306930975861,
638306930976194,
638306930976528,
638306930977194,
638306930977528,
638306930977861,
638306930978195,
638306930978528,
638306930979194,
638306930979528,
638306930979861,
638306930980195,
638306930980528,
638306930981194,
638306930981528,
638306930981861,
638306930982195,
638306930982528,
638306930983195,
638306930983528,
638306930983861,
638306930984195,
638306930984528,
638306930985195,
638306930985528,
638306930985861,
638306930986195,
638306930986528,
638306930987195,
638306930987528,
638306930987861,
638306930988195,
638306930988528,
638306930989195,
638306930989528,
638306930989861,
638306930990195,
638306930990528,
638306930991195,
638306930991528,
638306930991861,
638306930992195,
638306930992528,
638306930993195,
638306930993528,
638306930993861,
638306930994195,
638306930994528,
638306930995195,
638306930995528,
638306930995862,
638306930996195,
638306930996528,
638306930997195,
638306930997528,
638306930997862,
638306930998195,
638306930998528,
638306930999195,
638306930999528,
638306930999862,
638306931000195,
638306931000528,
638306931001195,
638306931001528,
638306931001862,
638306931002195,
638306931002528,
638306931003195,
638306931003529,
638306931003862,
638306931004195,
638306931004528,
638306931005195,
638306931005529,
638306931005862,
638306931006195,
638306931006529,
638306931007195,
638306931007529,
638306931007862,
638306931008195,
638306931008529,
638306931009195,
638306931009529,
638306931009862,
638306931010195,
638306931010529,
638306931011195,
638306931011529,
638306931011862,
638306931012195,
638306931012529,
638306931013195,
638306931013529,
638306931013862,
638306931014195,
638306931014529,
638306931015195,
638306931015529,
638306931015862,
638306931016196,
638306931016529,
638306931017195,
638306931017529,
638306931017862,
638306931018196,
638306931018529,
638306931019196,
638306931019529,
638306931019862,
638306931020196,
638306931020529,
638306931021196,
638306931021529,
638306931021862,
638306931022196,
638306931022529,
638306931023196,
638306931023529,
638306931023862,
638306931024196,
638306931024529,
638306931025196,
638306931025529,
638306931025862,
638306931026196,
638306931026529,
638306931027196,
638306931027529,
638306931027862,
638306931028196,
638306931028529,
638306931029196,
638306931029529,
638306931029862,
638306931030196,
638306931030529,
638306931031196,
638306931031529,
638306931031863,
638306931032196,
638306931032529,
638306931033196,
638306931033529,
638306931033863,
638306931034196,
638306931034529,
638306931035196,
638306931035529,
638306931035863,
638306931036196,
638306931036529,
638306931037196,
638306931037529,
638306931037863,
638306931038196,
638306931038529,
638306931039196,
638306931039530,
638306931039863,
638306931040196,
638306931040529,
638306931041196,
638306931041530,
638306931041863,
638306931042196,
638306931042530,
638306931043196,
638306931043530,
638306931043863,
638306931044196,
638306931044530,
638306931045196,
638306931045530,
638306931045863,
638306931046196,
638306931046530,
638306931047196,
638306931047530,
638306931047863,
638306931048196,
638306931048530,
638306931049196,
638306931049530,
638306931049863,
638306931050196,
638306931050530,
638306931051196,
638306931051530,
638306931051863,
638306931052197,
638306931052530,
638306931053196,
638306931053530,
638306931053863,
638306931054197,
638306931054530,
638306931055197,
638306931055530,
638306931055863,
638306931056197,
638306931056530,
638306931057197,
638306931057530,
638306931057863,
638306931058197,
638306931058530,
638306931059197,
638306931059530,
638306931059863,
638306931060197,
638306931060530,
638306931061197,
638306931061530,
638306931061863,
638306931062197,
638306931062530,
638306931063197,
638306931063530,
638306931063863,
638306931064197,
};

int wmain()
{
    try
    {
        winrt::init_apartment();
        THROW_IF_FAILED(MFStartup(MF_VERSION));
        auto&& Scope = wil::scope_exit([] { THROW_IF_FAILED(MFShutdown()); });

        // NOTE: Place your files in input\Cctv_Export directory
        // NOTE: Set working directory to $(TargetDir) to run from debugger and have output file placed near binary
        wil::com_ptr<IMFSinkWriter> SinkWriter;
        THROW_IF_FAILED(MFCreateSinkWriterFromURL(L"FrameVideoMp4WithSinkWriter Output.mp4", nullptr, nullptr, SinkWriter.put()));
        wil::com_ptr<IMFMediaType> OutputMediaType;
        THROW_IF_FAILED(MFCreateMediaType(OutputMediaType.put()));
        THROW_IF_FAILED(OutputMediaType->SetGUID(MF_MT_MAJOR_TYPE, MFMediaType_Video));
        THROW_IF_FAILED(OutputMediaType->SetGUID(MF_MT_SUBTYPE, MFVideoFormat_H264));
        THROW_IF_FAILED(MFSetAttributeRatio(OutputMediaType.get(), MF_MT_FRAME_RATE, 25u, 1u));
        THROW_IF_FAILED(MFSetAttributeSize(OutputMediaType.get(), MF_MT_FRAME_SIZE, 1280u, 720u));
        THROW_IF_FAILED(OutputMediaType->SetUINT32(MF_MT_INTERLACE_MODE, MFVideoInterlace_Progressive));
        THROW_IF_FAILED(OutputMediaType->SetUINT32(MF_MT_AVG_BITRATE, 5'000'000u));
        DWORD SinkWriterStreamIndex;
        THROW_IF_FAILED(SinkWriter->AddStream(OutputMediaType.get(), &SinkWriterStreamIndex));
        THROW_IF_FAILED(SinkWriter->SetInputMediaType(SinkWriterStreamIndex, OutputMediaType.get(), nullptr));

        THROW_IF_FAILED(SinkWriter->BeginWriting());
        for(size_t FrameIndex = 0; FrameIndex < std::size(g_FrameTimes); FrameIndex++)
        {
            wchar_t FileName[MAX_PATH];
            swprintf_s(FileName, L"..\\..\\..\\input\\Cctv_Export\\%04zu_%015llu.dat", FrameIndex + 1, g_FrameTimes[FrameIndex]);
            wil::unique_hfile File;
            File.reset(CreateFileW(FileName, GENERIC_READ, FILE_SHARE_READ, nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nullptr));
            THROW_LAST_ERROR_IF(!File.is_valid());

            uint8_t Data[128 << 10];
            DWORD DataSize;
            THROW_IF_WIN32_BOOL_FALSE(ReadFile(File.get(), Data, sizeof Data, &DataSize, nullptr));

            wil::com_ptr<IMFMediaBuffer> MediaBuffer;
            THROW_IF_FAILED(MFCreateMemoryBuffer(DataSize, MediaBuffer.put()));
            BYTE* BufferData;
            DWORD BufferDataSize, BufferDataCapacity;
            THROW_IF_FAILED(MediaBuffer->Lock(&BufferData, &BufferDataSize, &BufferDataCapacity));
            std::memcpy(BufferData, Data, DataSize);
            THROW_IF_FAILED(MediaBuffer->Unlock());
            THROW_IF_FAILED(MediaBuffer->SetCurrentLength(DataSize));

            wil::com_ptr<IMFSample> Sample;
            THROW_IF_FAILED(MFCreateSample(Sample.put()));
            THROW_IF_FAILED(Sample->AddBuffer(MediaBuffer.get()));
            THROW_IF_FAILED(Sample->SetSampleTime((g_FrameTimes[FrameIndex] - g_FrameTimes[0]) * 1'000u));
            THROW_IF_FAILED(Sample->SetSampleDuration(40'0000ll));

            THROW_IF_FAILED(SinkWriter->WriteSample(SinkWriterStreamIndex, Sample.get()));
        }
        THROW_IF_FAILED(SinkWriter->Finalize());
    }
    CATCH_LOG();
    return 0;
}
